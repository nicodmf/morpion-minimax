{"version":3,"sources":["AppContextProvider.tsx","components/Square.tsx","components/Board.tsx","components/Title.tsx","components/Score.tsx","components/Help.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["clone","obj","JSON","parse","stringify","Point","x","y","Object","classCallCheck","this","value","concat","point","key","Board","width","height","points","winCount","winner","win","keyFromPoint","type","start","i","board","_i2","_Object$entries","entries","length","_ref3","_ref2","slicedToArray","push","_i3","_Object$entries2","_ref6","_ref5","j","line","column","obliqBottom","obliqTop","distance","Math","max","min","Node","computedChilds","childs","won","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","emptyPoints","Symbol","iterator","next","done","err","return","Try","count","Infinity","node","alphabeta","depth","_this","alpha","arguments","beta","isTerminal","forEach","child","maximizingPlayer","_this2","minimax","computed","Round","resultingPoint","betterTry","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","emptyPoint","current","compute","console","log","Robot","setState","round","evaluate","betterPoint","ended","completed","playable","AppContext","createContext","AppProvider","_Component","props","_this3","possibleConstructorReturn","getPrototypeOf","call","state","choice","set","robot","play","restart","restartWithRobot","bind","assertThisInitialized","inherits","createClass","react_default","a","createElement","Provider","children","Component","Square","_React$PureComponent","apply","_this$props","_this$context","context","style","isWinningPoint","background","onClick","React","PureComponent","contextType","range","size","values","cursor","map","k1","k2","Square_Square","Title","Score","Help","className","App","AppContextProvider_AppProvider","Title_Title","Board_Board","Score_Score","Help_Help","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8254bd1.chunk.js","sourcesContent":["import React, { createContext, Component } from 'react';\nimport _ from 'lodash';\n\nfunction clone(obj: any) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nclass Point {\n  x: number;\n  y: number;\n  value: string | null = null;\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static key(x: number, y: number): string {\n    return `${x}-${y}`\n  }\n  static keyFromPoint(point: Point): string {\n    return this.key(point.x, point.y)\n  }\n}\n\ninterface IndexedPoints {\n  [position: string]: Point;\n}\n\nclass Board {\n  points: IndexedPoints = {};\n  width: number;\n  height: number;\n  winCount = 3;\n  winner: string | null = null;\n  win: any = {}\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    if (this.width > 5 || this.height > 5) {\n      this.winCount = 5;\n    }\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        let point = new Point(x, y);\n        this.points[Point.keyFromPoint(point)] = point;\n\n      }\n    }\n  }\n  \n  isWinningPoint(x:number, y:number) {\n    //console.log(this.win, x, y, this.winCount)\n    switch(this.win.type) { \n      case 'line': return y==this.win.start.y && x>=this.win.start.x && x<this.win.start.x+this.winCount;\n      case 'column': return x==this.win.start.x && y>=this.win.start.y && y<this.win.start.y+this.winCount; \n      case 'ob': \n        for(let i=0; i<this.winCount; i++) {\n          if(x===this.win.start.x+i && y===this.win.start.y+i) {\n            return true;\n          }\n        }\n        return false;\n      case 'ot':\n        for(let i=0; i<this.winCount; i++) {\n          if(x===this.win.start.x+i && y===this.win.start.y-i) {\n            return true;\n          }\n        }\n        return false;\n    }\n  }\n\n  value(x: number, y: number) {\n    return this.points[Point.key(x, y)].value;\n  }\n\n  set(x: number, y: number, value: string) {\n    return this.points[Point.key(x, y)].value = value;\n  }\n\n  static emptyPoints(board: Board): Point[] {\n    const points: Point[] = [];\n    for (let [_, point] of Object.entries(board.points)) {\n      if (point.value === null) {\n        points.push(point);\n      }\n    }\n    if(points.length===board.width*board.height) {      \n      return [\n        new Point(1,0),\n        new Point(0,0),\n        new Point(1,1),\n      ]\n    }\n    return points;\n  }\n\n  static completed(board: Board): boolean {\n    const points: Point[] = [];\n    for (let [_, point] of Object.entries(board.points)) {\n      if (point.value === null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected static line(x: number, y: number, board: Board): boolean {\n    const start: string | null = board.points[Point.key(x, y)].value;\n    if (start === null) {\n      return false;\n    }\n    if(x>board.width-board.winCount){\n      return false;\n    }\n    for (let i = x + 1; i < x + board.winCount; i++) {\n      if (!board.points[Point.key(i, y)] || board.points[Point.key(i, y)].value !== start) {\n        return false;\n      }\n    }\n    board.winner = start;\n    return true;\n  }\n\n  protected static column(x: number, y: number, board: Board): boolean {\n    const start = board.points[Point.key(x, y)].value;\n    if (start === null) {\n      return false;\n    }\n    if(y>board.height-board.winCount){\n      return false;\n    }\n    for (let j = y + 1; j < y + board.winCount; j++) {\n      if (!board.points[Point.key(x, j)] || board.points[Point.key(x, j)].value !== start) {\n        return false;\n      }\n    }\n    board.winner = start;\n    return true;\n  }\n\n  protected static obliqBottom(x: number, y: number, board: Board): boolean {\n    const start = board.points[Point.key(x, y)].value;\n    if (start === null) {\n      return false;\n    }\n    if(x>board.width-board.winCount){\n      return false;\n    }\n    for (let i = 0; i < board.winCount; i++) {\n      if (!board.points[Point.key(x + i, y + i)] || board.points[Point.key(x + i, y + i)].value !== start) {\n        return false;\n      }\n    }\n    board.winner = start;\n    return true;\n  }\n\n  protected static obliqTop(x: number, y: number, board: Board): boolean {\n    const start = board.points[Point.key(x, y)].value;\n    if (start === null) {\n      return false;\n    }\n    if(x>board.width-board.winCount){\n      return false;\n    }\n    for (let i = 0; i < board.winCount; i++) {\n      if (!board.points[Point.key(x + i, y - i)] || board.points[Point.key(x + i, y - i)].value !== start) {\n        return false;\n      }\n    }\n    board.winner = start;\n    return true;\n  }\n\n  static won(board: Board): boolean {\n    // Won by line\n    for (let y = 0; y < board.height; y++) {\n      for (let x = 0; x < board.width; x++) {\n        if (Board.line(x, y, board)) {\n          board.win = {start: {x, y}, type:'line'};\n          return true;\n        }\n        if (Board.column(x, y, board)) {\n          board.win = {start: {x, y}, type:'column'};\n          return true;\n        }\n        if (Board.obliqBottom(x, y, board)) {\n          board.win = {start: {x, y}, type:'ob'};\n          return true;\n        }\n        if (Board.obliqTop(x, y, board)) {\n          board.win = {start: {x, y}, type:'ot'};\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  static hasAdjacentPoint(point: Point, board: Board, distance:number) {\n    for(let x = Math.max(0, point.x - distance); x<Math.min(board.width, point.x + distance); x++) {\n      for(let y = Math.max(0, point.y - distance); y<Math.min(board.width, point.y + distance); y++) {\n        if(board.points[Point.key(x, y)].value!==null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nclass Node {\n  board: Board;\n  point: Point;\n  protected computedChilds: Node[] | null = null\n  constructor(board: Board, point: Point) {\n    this.board = board;\n    this.point = point;\n  }\n\n  get childs(): Node[] {\n    if (this.computedChilds) {\n      return this.computedChilds;\n    }\n    const childs: Node[] = [];\n    if (Board.won(this.board)) {\n      return [];\n    }\n    for (let emptyPoint of Board.emptyPoints(this.board)) {\n      /*if(!Board.hasAdjacentPoint(emptyPoint, this.board, 2)) {\n        continue;\n      }*/\n      let point = clone(emptyPoint);\n      point.value = this.point.value === 'X' ? 'O' : 'X';\n      const board = clone(this.board);\n      board.points[Point.keyFromPoint(point)] = point;\n      childs.push(new Node(board, point));\n    }\n    this.computedChilds = childs;\n    return this.computedChilds;\n  }\n\n  get isTerminal() {\n    return this.childs.length === 0;\n  }\n\n  get value(): number {\n    //console.log('X win', this.board.won('X'), 'O win', this.board.won('O'));\n    const won = this.board.winner !== null;\n    return won ? (this.board.winner === 'X' ? -100 : 100) : 0;\n  }\n}\n\nclass Try {\n  static computed:any = {};\n  board: Board;\n  point: Point;\n  count: number = 0;\n  value: number = -Infinity;\n  constructor(board: Board, point: Point) {\n    this.board = clone(board);\n    this.board.points[Point.keyFromPoint(point)] = point;\n    this.point = point;\n  }\n\n  compute() {\n    const node = new Node(this.board, this.point);\n    //this.value = this.minimax(node, 10, false);\n    this.value = this.alphabeta(node, 100);\n  }\n\n  protected alphabeta(node: Node, depth:number, alpha:number=-Infinity, beta:number=+Infinity) {\n    this.count++;\n    if (depth === 0 || node.isTerminal) {\n      return node.value*depth;\n    }\n    let value: number;\n    if(node.point.value==='O'){\n        value = +Infinity;\n        node.childs.forEach((child: Node) => {\n          value = Math.min(value, this.alphabeta(child, depth - 1, alpha, beta));\n          if(alpha>=value) {\n            return value;\n          }\n          beta = Math.min(beta, value);\n        })\n    } else {\n      value = -Infinity;\n      node.childs.forEach((child: Node) => {\n        value = Math.max(value, this.alphabeta(child, depth - 1, alpha, beta));\n        if(value>=beta) {\n          return value;\n        }\n        alpha = Math.max(alpha, value);\n      })\n    }\n    return value;\n  }\n\n  protected minimax(node: Node, depth: number, maximizingPlayer: boolean): number {\n    this.count++;\n    if (depth === 0 || node.isTerminal) {\n      return node.value * (depth);\n    }\n    let value: number;\n    if (maximizingPlayer) {\n      value = -Infinity;\n      node.childs.forEach((child: Node) => {\n        value = Math.max(value, this.minimax(child, depth - 1, false))\n      })\n    } else {\n      value = Infinity;\n      node.childs.forEach((child: Node) => {\n        value = Math.min(value, this.minimax(child, depth - 1, true))\n      })\n    }\n    //console.log(maximizingPlayer, value);\n    //console.log(this.count)\n    return value;\n  }\n\n}\n\nclass Round {\n\n  board: Board;\n  resultingPoint: Point = new Point(-1, -1);\n\n  constructor(board: Board) {\n    this.board = board;\n  }\n\n  evaluate() {\n    let betterTry: Try | null = null;\n    // var try:Try = betterTry;\n    for (let emptyPoint of Board.emptyPoints(this.board)) {\n      /*if(!Board.hasAdjacentPoint(emptyPoint, this.board, 1)) {\n        continue;\n      }*/\n      let point = clone(emptyPoint);\n      point.value = emptyPoint.value === null || emptyPoint.value === 'X' ? 'O' : 'X';\n      let current = new Try(this.board, point);\n      current.compute();\n      if (betterTry === null || current.value > betterTry.value) {\n        betterTry = current;\n      }\n      console.log(point, current.value, current.count);\n    }\n    console.log(betterTry);\n\n    this.resultingPoint = betterTry !== null ? betterTry.point : new Point(-1, -1);\n  }\n\n  get betterPoint(): Point {\n    return this.resultingPoint;\n  }\n}\n\nclass Robot {\n  protected setState: Function;\n  constructor(setState: Function) {\n    this.setState = setState;\n  }\n\n  play(board: Board) {\n    const round = new Round(board);\n    round.evaluate();\n    const point = round.betterPoint;\n    board.points[Point.keyFromPoint(point)] = point;\n    const won = Board.won(board);\n    const ended = Board.completed(board)\n    this.setState({ board, playable: !won&&!ended, won, ended })\n  }\n}\n\nconst AppContext = createContext({\n  width: 3,\n  height: 3,\n  board: new Board(3, 3),\n});\n\ninterface AppProviderState {\n  width: number;\n  height: number;\n  playable: boolean;\n  board: Board;\n  won: boolean;\n  ended: boolean;\n}\n\nexport class AppProvider extends Component<any, AppProviderState> {\n  state = {\n    width: 3,\n    height: 3,\n    playable: true,\n    won: false,\n    ended: false,\n    board: new Board(3, 3),\n    choice: (x: number, y: number) => () => {\n      const board = this.state.board;\n      board.set(x, y, \"X\");\n      this.setState({ board, playable: false }, () => {\n        if (Board.won(board)) {\n          this.setState({won: true});\n          console.log('won by', board.winner)\n        } else if(Board.completed(board)){\n          this.setState({ended: true});\n        } else {\n          console.log('not won')\n          this.robot.play(board)\n        }\n      });\n    },\n    restart: () => {\n      const board = new Board(3, 3);\n      this.setState({\n        board,\n        playable: true,\n        won: false,\n        ended: false,\n      })\n    },\n    restartWithRobot: () => {\n      const board = new Board(3, 3);\n      this.setState({\n        board,\n        playable: true,\n        won: false,\n        ended: false,\n      }, ()=>this.robot.play(board))\n    }\n  };\n\n  protected robot: Robot;\n\n  constructor(props: any) {\n    super(props);\n    this.state.board = new Board(this.state.width, this.state.height);\n    this.robot = new Robot(this.setState.bind(this))\n    // this.state.board.set(1, 2, \"X\");\n    // this.robot.play(this.state.board)\n  }\n  componentDidMount() {\n    // const board = this.state.board;\n    // board.set(0, 0, \"O\");\n    // board.set(1, 1, \"O\");\n    // board.set(2, 2, \"O\");\n    // console.log(board.won(), board.winner)\n    // this.setState({board})\n    // board.set(1, 1, \"X\");\n    // board.set(2, 1, \"X\");\n    // board.set(0, 2, \"X\");\n    // this.setState({board, playable:false}, ()=>this.robot.play(board));\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default AppContext","import React, { ReactNode } from 'react';\nimport AppContext from '../AppContextProvider';\n\ninterface SquareProps {\n    x: number;\n    y: number;\n}\n\ninterface SquareState {\n    \n}\n\nexport class Square extends React.PureComponent <SquareProps, SquareState> {\n    render(): ReactNode {\n        const {\n            x,\n            y,\n        } = this.props;\n        const {\n            board,\n            playable,\n        } =  this.context;\n        const value = board.value(x, y);\n        let style:any = {};\n        if(board.winner && board.isWinningPoint(x, y)) {\n            style.background = board.winner==='X' ? 'green' : 'red';\n        }\n\n        return (\n            <td onClick={playable && value===null? this.context.choice(x,y) : null} style={style}>\n                {value}\n            </td>\n        )\n    }\n}\n\nSquare.contextType = AppContext;","import React, { ReactNode } from 'react';\nimport { Square } from './Square';\nimport AppContext from '../AppContextProvider';\nimport './Board.css'\n\nfunction range(size:number, startAt:number = 0):ReadonlyArray<number> {\n    const values: number[] = [];\n    for(let i=startAt; i<size; i++) {\n        values.push(i);\n    }\n    return values;\n}\n\ninterface BoardProps {\n}\n\ninterface BoardState {\n}\n\nexport class Board extends React.PureComponent <BoardProps, BoardState> {\n    render(): ReactNode {\n        const {\n            width,\n            height,\n            playable,\n            won,\n        } = this.context;\n\n        return (\n            <table style={{cursor: playable ? 'pointer' : 'initial'}}>\n                <tbody>\n                    {range(height).map((y, k1)=>(\n                    <tr key={k1}>\n                        {range(width).map((x, k2)=>(\n                            <Square key={k2} x={x} y={y} />\n                        ))}\n                    </tr>\n                    ))}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nBoard.contextType = AppContext;","import React, { ReactNode } from 'react';\nimport AppContext from '../AppContextProvider';\n\ninterface TitleProps {\n}\n\ninterface TitleState {\n    \n}\n\nexport class Title extends React.PureComponent <TitleProps, TitleState> {\n    render(): ReactNode {\n        return (\n            <div>\n                <h1>Jouer au morpion contre l'algorithme minimax</h1>\n            </div>\n        )\n    }\n}\n\nTitle.contextType = AppContext;","import React, { ReactNode } from 'react';\nimport AppContext from '../AppContextProvider';\n\ninterface ScoreProps {\n}\n\ninterface ScoreState {\n    \n}\n\nexport class Score extends React.PureComponent <ScoreProps, ScoreState> {\n    render(): ReactNode {\n        const {\n            won,\n            board,\n            ended,\n        } = this.context;\n\n        return (\n            <div>\n                {!won?null:<h2>Partie gagnée par les {board.winner}</h2>}\n                {!ended?null:<h2>Partie finie sur une égalité</h2>}\n                {!(ended||won)?null:<button onClick={()=>this.context.restart()}>Recommencer</button>}\n                {!(ended||won)?null:<button onClick={()=>this.context.restartWithRobot()}>Recommencer, le robot commence</button>}\n            </div>\n        )\n    }\n}\n\nScore.contextType = AppContext;","import React, { ReactNode } from 'react';\nimport AppContext from '../AppContextProvider';\n\ninterface HelpProps {\n}\n\ninterface HelpState {\n    \n}\n\nexport class Help extends React.PureComponent <HelpProps, HelpState> {\n    render(): ReactNode {\n        return (\n            <div className=\"help\">\n                <p>\n                    Ce mort pion est une mise en oeuvre de l'algorythme minimax sans limite de profondeur.<br />\n                    Le nombre d'itération de l'algorythme suit exponentiellement le nombre de case vide\n                    (visible dans l'inspecteur) :\n                    <ul>\n                        <li>~65000 par case si le robot commence (9 cases vides)</li>\n                        <li>~7000 par case au deuxième coup</li>\n                        <li>~180 par case au troisième coup</li>\n                    </ul>\n                    Afin de limiter le temps de réponse, seule trois cases sont laissées au\n                    premier coup au robot s'il commence (le centre, un angle, un milieu extérieur).\n                    Il choisi toujours le centre haut.\n                </p>\n                <p>\n                    Le jeu a été développé pour une prise en charge de grille plus importante, \n                    mais au regard des temps de résolution (plusieur dizaines par secondes pour \n                    des grilles de 30 cases), seule la version à 9 cases est mise en ligne.\n                </p>\n                <p>\n                    Dans cette configurations, le robot et l'homme s'ils ne font aucune erreur \n                    ne gagnent jamais. Je vous laisse tester et me prévenir si vous réussissez à \n                    vaincre l'ordinateur.\n                </p>\n            </div>\n        )\n    }\n}\n\nHelp.contextType = AppContext;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Board } from './components/Board';\nimport { AppProvider } from './AppContextProvider';\nimport { Title } from './components/Title';\nimport { Score } from './components/Score';\nimport { Help } from './components/Help';\n\nconst App: React.FC = () => {\n  return (\n    <AppProvider>\n      <div className=\"App\">\n        <Title />\n        <Board />\n        <Score />\n        <Help />\n      </div>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}